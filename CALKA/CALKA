#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <math.h>
#define FLOAT_REGEX "^-?[0-9]+?\\.?([0-9]+)?\n?$"
#define OPERAND_REGEX "^(\\+?\\-?\\/?\\=?\\^?l?s?a?c?p?w?)?\n?$"
#define MAX 20000

double tab[MAX];
int top = 0;

int isfloat (char temp[MAX]) {
    regex_t check;
    int spr;

    spr = regcomp(&check, FLOAT_REGEX, REG_EXTENDED);
    spr = regexec(&check, temp, 0, NULL, 0);

    if(!spr) {
        return 1;
    }
    else {
        return 0;
    }

}

int isoperand (char temp[MAX]) {
    regex_t check;
    int spr;

    spr = regcomp(&check, OPERAND_REGEX, REG_EXTENDED);
    spr = regexec(&check, temp, 0, NULL, 0);

    if(!spr) {
        return 1;
    }
    else {
        return 0;
    }

}


void push(double add) {
    if (top == MAX) {
        printf("Przepełnienie stosu!");
        exit(0);
    }
    else {
        tab[top++] = add;
    }
}
double pop() {
    if (top == 0) {
        printf("Stos pusty, nie ma czego zdjąć!(Prawdopodobnie zostało źle wpisane działanie w ONP");
        exit(0);
    }
    else {
        return tab[--top];
        
    }
}

double process (int argc, char *argv[], double z) {
    double x,y;
    double answer;
    char *rPtr;
    for (int i = 1; i < argc; i++) {
        if (isoperand(argv[i])) {
            //printf("%s", argv[i]);
            char actual_operator = *argv[i];
            switch (actual_operator) {
                case '+':
                    y = pop();
                    x = pop();
                    push(x+y);
                    continue;
                case '-':
                    y = pop();
                    x = pop();
                    push(x-y);
                    continue;
                case 'a':
                    y = pop();
                    x = pop();
                    double temp = x*y;
                    push(temp);
                    continue;
                case '/':
                    y = pop();
                    x = pop();
                    if (x == 0) {
                        printf("Nie wolno dzielić przez zero!");
                        exit(0);
                    }
                    push(x/y);
                    continue;
                case '^':
                    y = pop();
                    x = pop();
                    push(pow(x,y));
                    continue;
                case 'p':
                    x = pop();
                    push(sqrt(x));
                    continue;
                case 'l':
                    x = pop();
                    push(log(x));
                    continue;
                case 's':
                    x = pop();
                    push(sin(x));
                    continue;
                case 'c':
                    x = pop();
                    push(cos(x));
                    continue;
                default:
                    printf("blad tragiczny");
                    exit(1);
            }
        }
        else if(isfloat(argv[i])) {
            double forpush = strtod(argv[i], &rPtr);
            //printf("%lf", forpush);
            push(forpush);
        }
        else if(!strcmp(argv[i], "x")) {
            push(z);
        }
        else {  
            printf("Błąd tragiczny!\n");
        }
    }

    return tab[0];

}

int main (int argc, char *argv[]) {
    double p,k,h,calka;
    int n = 1000;
    calka = 0;
    p = 1;
    k = 3;

    h = (k - p)/(double)n;

    for (int i = 1; i < n; i++) {
        calka += process(argc, argv, p + (i*h));
        printf("%lf", calka);
    }
    calka += process(argc, argv, p)/2;
    calka += process(argc, argv, k)/2;
    calka *= h;
    printf("%lf", calka);
    return 0;
}
