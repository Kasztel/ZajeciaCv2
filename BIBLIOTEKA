#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

struct bibl {
    char name[20];
    char surrname[20];
    char book[5][20];
    int id;
    int bCount;
};

struct bibl oper[100];
int readersCount = 0;
int rentedBooks = 0;

void sweep () {
    while (getchar() != '\n');
}

void printAll() {
    printf("Zarejestrowani czytelnicy:\n");
    for (int i = 0; i<readersCount; i++) {
        printf("Imie: %s\n", oper[i].name);
        printf("Nazwisko: %s\n", oper[i].surrname);
        printf("Unikalne ID: %d\n", oper[i].id);
        printf("Lista wypożyczonych książek: \n");
        for(int n=0; n < oper[i].bCount; n++) {
            printf("%s\n", oper[i].book[n]);
        }
    }
}

void printDate() {
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    printf("Dzisiaj jest %d-%02d-%02d.\n", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
}



void addReader () {
    printf("Podaj imie: \n");
    scanf("%s", oper[readersCount].name);
    printf("Podaj nazwisko: \n");
    scanf("%s", oper[readersCount].surrname);
    printf("Podaj swoje unikalne ID czytelnika: \n");
    scanf("%d", &oper[readersCount].id);
    oper[readersCount].bCount = 0;
    printf("Czytelnik %s %s o unikalnym ID %d został zarejestrowany!\n", oper[readersCount].name, oper[readersCount].surrname, oper[readersCount].id);
    readersCount++;
}

int removeReader () {
    int pom;
    int flag = -1;
    printf("Podaj unikalne ID czytelnika którego chcesz usunąć:\n");
    scanf("%d", &pom);

    for(int i = 0; i<readersCount; i++) {
        if(oper[i].id == pom) {
            pom = i;
            flag = 0;
            break;
        }
    }
    if (flag == -1) {
        printf("Ten użytkownik już nie istnieje!\n");
        return 0;
    }
    for (int n = pom; n < readersCount; n++) {
        oper[n] = oper[n+1];
    }
    printf("Użytkownik usunięty!\n");
}
int rentBook () {
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    int pom;
    int flag = -1;
    printf("Podaj unikalne ID użytkowanika, który chce wypożyczyć książkę: \n");
    scanf("%d", &pom);

    for (int i = 0; i < readersCount; i++) {
        if (oper[i].id == pom) {
            pom = i;
            flag = 0;
            break;
        }
    
    }
    if (flag == -1) {
            printf("Nie ma takiego czytelnika!\n");
            return 0;
    }
    printf("Podaj tytuł książki, którą chcesz wypożyczyć: \n");
    scanf("%s", oper[pom].book[oper[pom].bCount]);
    oper[pom].bCount++;
    rentedBooks++;
    printf("Dzisiaj jest %d-%02d-%02d.\nPamiętaj o zwróceniu książki za miesiąc!\n", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
}

int returnBook () {
    int pom;
    char help[20];
    int flag = -1;
    printf("Podaj ID czytelnika, który zwraca książkę\n");
    scanf("%d", &pom);
    for(int i = 0; i<readersCount; i++) {
        if(oper[i].id == pom) {
            pom = i;
            flag = 0;
            break;
        }
    }
    if (flag == -1) {
        printf("Nie ma takiego czytelnika!\n");
        return 0;
    }

    printf("Podaj dokładny tytuł książki:\n");
    scanf("%s", help);

    for (int n = 0; n<oper[pom].bCount; n++) {
        if (!strcmp(help, oper[pom].book[n])) {
            for (int k = n; k < oper[pom].bCount; k++) {
                strcpy(oper[pom].book[k],oper[pom].book[k+1]);
            }
        }
    }
    oper[pom].bCount--;
}





int main () {
    while (1) {
        int choice;
        printf("\nCo chcesz zrobić?\n");
        printf("1.Dodać czytelnika\n");
        printf("2.Wypożyczyć książkę\n");
        printf("3.Wyświetlić wszystkich użytkowników i wypożyczonych książek\n");
        printf("4.Wyświetlić dzisiejszą datę\n");
        printf("5.Usunąć czytelnika\n");
        printf("6.Zwrócić książkę\n");
        printf("7.Wyjść z biblioteki\n");
        printf("Wybór: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                addReader();
                break;
            case 2:
                rentBook();
                break;
            case 3:
                printAll();
                break;
            case 4:
                printDate();
                break;
            case 5:
                removeReader();
                break;
            case 6:
                returnBook();
                break;
            case 7:
                exit(0);
            default: 
                printf("Nie ma takiej opcji!\n-------------\n");
                break;
        }
        sweep();
    }
}
